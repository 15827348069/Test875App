apply plugin: 'com.android.library'
apply plugin: 'org.greenrobot.greendao' // apply plugin

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //设置路由
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        //正式
        release {
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "buildTime", "\"" + releaseTime() + "\""
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //仿真
        release {
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "buildTime", "\"" + releaseTime() + "\""
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //测试
        debug {
            buildConfigField "boolean", "IS_DEBUG", "true"
            buildConfigField "String", "buildTime", "\"" + releaseTime() + "\""
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //JDK版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //设置代码审查
    lintOptions {
        abortOnError false
    }

    greendao {
        schemaVersion 1 //数据库版本号
        daoPackage 'com.baselibrary.dao.db'
        // 设置DaoMaster、DaoSession、Dao 包名
        targetGenDir 'src/main/java'//设置DaoMaster、DaoSession、Dao目录,请注意，这里路径用.不要用/
        generateTests false //设置为true以自动生成单元测试。
        targetGenDirTests 'src/main/java' //应存储生成的单元测试的基本目录。默认为 src / androidTest / java。
    }

}

static def releaseTime() {
    return new Date().format("MMddHHmmss", TimeZone.getTimeZone("Asia/Hangzhou"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api(rootProject.ext.dependencies["appcompat-v7"]) {
        exclude module: "support-v4"
        exclude module: "support-annotations"
    }
    testImplementation 'junit:junit:4.12'
    // androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

//    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["multidex"]
    api rootProject.ext.dependencies["greendao"]
    api rootProject.ext.dependencies["percent"]
    api rootProject.ext.dependencies["dynamic"]
    api rootProject.ext.dependencies["router"]

    api rootProject.ext.dependencies["rxandroid"]
    api rootProject.ext.dependencies["rxjava"]

    api rootProject.ext.dependencies["gson"]
    api rootProject.ext.dependencies["glide"]
    api rootProject.ext.dependencies["logger"]
    //依赖去重
    api(rootProject.ext.dependencies["glide-transformations"]) {
        exclude module: 'glide'
    }

    //文件依赖的写法
    //api files('libs/tbs_sdk_thirdapp_v3.2.0.jar')

    //注解的依赖写法
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    annotationProcessor rootProject.ext.dependencies["router-compiler"]


}
