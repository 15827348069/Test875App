package com.baselibrary.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.baselibrary.pojo.Department;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT".
*/
public class DepartmentDao extends AbstractDao<Department, Long> {

    public static final String TABLENAME = "DEPARTMENT";

    /**
     * Properties of entity Department.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DepartmentId = new Property(0, Long.class, "departmentId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Count = new Property(2, int.class, "count", false, "count");
    }

    private DaoSession daoSession;


    public DepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: departmentId
                "\"name\" TEXT NOT NULL ," + // 1: name
                "\"count\" INTEGER NOT NULL );"); // 2: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Department entity) {
        stmt.clearBindings();
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(1, departmentId);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Department entity) {
        stmt.clearBindings();
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(1, departmentId);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getCount());
    }

    @Override
    protected final void attachEntity(Department entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Department readEntity(Cursor cursor, int offset) {
        Department entity = new Department( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // departmentId
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Department entity, int offset) {
        entity.setDepartmentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setCount(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Department entity, long rowId) {
        entity.setDepartmentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Department entity) {
        if(entity != null) {
            return entity.getDepartmentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Department entity) {
        return entity.getDepartmentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
