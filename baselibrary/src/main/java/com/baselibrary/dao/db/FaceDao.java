package com.baselibrary.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.baselibrary.util.FloatArrayConverter;

import com.baselibrary.pojo.Face;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE".
*/
public class FaceDao extends AbstractDao<Face, Long> {

    public static final String TABLENAME = "FACE";

    /**
     * Properties of entity Face.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ImagePath = new Property(2, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Feature = new Property(3, String.class, "feature", false, "FEATURE");
    }

    private final FloatArrayConverter featureConverter = new FloatArrayConverter();

    public FaceDao(DaoConfig config) {
        super(config);
    }
    
    public FaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"NAME\" TEXT," + // 1: name
                "\"IMAGE_PATH\" TEXT," + // 2: imagePath
                "\"FEATURE\" TEXT);"); // 3: feature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Face entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
 
        float[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(4, featureConverter.convertToDatabaseValue(feature));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Face entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
 
        float[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(4, featureConverter.convertToDatabaseValue(feature));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Face readEntity(Cursor cursor, int offset) {
        Face entity = new Face( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imagePath
            cursor.isNull(offset + 3) ? null : featureConverter.convertToEntityProperty(cursor.getString(offset + 3)) // feature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Face entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFeature(cursor.isNull(offset + 3) ? null : featureConverter.convertToEntityProperty(cursor.getString(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Face entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Face entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Face entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
