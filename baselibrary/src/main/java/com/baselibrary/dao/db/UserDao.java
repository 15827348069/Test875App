package com.baselibrary.dao.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.baselibrary.pojo.ArcFace;
import com.baselibrary.pojo.Department;
import com.baselibrary.pojo.IdCard;
import com.baselibrary.pojo.Pw;

import com.baselibrary.pojo.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "username");
        public final static Property JobNumber = new Property(3, String.class, "jobNumber", false, "jobNumber");
        public final static Property DepartmentId = new Property(4, Long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property PermissionType = new Property(5, int.class, "permissionType", false, "PERMISSION_TYPE");
        public final static Property FaceId = new Property(6, Long.class, "faceId", false, "FACE_ID");
        public final static Property CardId = new Property(7, Long.class, "cardId", false, "CARD_ID");
        public final static Property PwId = new Property(8, Long.class, "pwId", false, "PW_ID");
    }

    private DaoSession daoSession;

    private Query<User> department_UserListQuery;

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"username\" TEXT NOT NULL ," + // 2: name
                "\"jobNumber\" TEXT NOT NULL UNIQUE ," + // 3: jobNumber
                "\"DEPARTMENT_ID\" INTEGER," + // 4: departmentId
                "\"PERMISSION_TYPE\" INTEGER NOT NULL ," + // 5: permissionType
                "\"FACE_ID\" INTEGER," + // 6: faceId
                "\"CARD_ID\" INTEGER," + // 7: cardId
                "\"PW_ID\" INTEGER);"); // 8: pwId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getJobNumber());
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(5, departmentId);
        }
        stmt.bindLong(6, entity.getPermissionType());
 
        Long faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindLong(7, faceId);
        }
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(8, cardId);
        }
 
        Long pwId = entity.getPwId();
        if (pwId != null) {
            stmt.bindLong(9, pwId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getJobNumber());
 
        Long departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(5, departmentId);
        }
        stmt.bindLong(6, entity.getPermissionType());
 
        Long faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindLong(7, faceId);
        }
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(8, cardId);
        }
 
        Long pwId = entity.getPwId();
        if (pwId != null) {
            stmt.bindLong(9, pwId);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // jobNumber
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // departmentId
            cursor.getInt(offset + 5), // permissionType
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // faceId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // cardId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // pwId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setJobNumber(cursor.getString(offset + 3));
        entity.setDepartmentId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPermissionType(cursor.getInt(offset + 5));
        entity.setFaceId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCardId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPwId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userList" to-many relationship of Department. */
    public List<User> _queryDepartment_UserList(Long userId) {
        synchronized (this) {
            if (department_UserListQuery == null) {
                QueryBuilder<User> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                department_UserListQuery = queryBuilder.build();
            }
        }
        Query<User> query = department_UserListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDepartmentDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getArcFaceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getIdCardDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getPwDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN DEPARTMENT T0 ON T.\"DEPARTMENT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ARC_FACE T1 ON T.\"FACE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN ID_CARD T2 ON T.\"CARD_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN PW T3 ON T.\"PW_ID\"=T3.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Department department = loadCurrentOther(daoSession.getDepartmentDao(), cursor, offset);
        entity.setDepartment(department);
        offset += daoSession.getDepartmentDao().getAllColumns().length;

        ArcFace arcFace = loadCurrentOther(daoSession.getArcFaceDao(), cursor, offset);
        entity.setArcFace(arcFace);
        offset += daoSession.getArcFaceDao().getAllColumns().length;

        IdCard idCard = loadCurrentOther(daoSession.getIdCardDao(), cursor, offset);
        entity.setIdCard(idCard);
        offset += daoSession.getIdCardDao().getAllColumns().length;

        Pw pw = loadCurrentOther(daoSession.getPwDao(), cursor, offset);
        entity.setPw(pw);

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
